# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cairo_access', [dirname(__file__)])
        except ImportError:
            import _cairo_access
            return _cairo_access
        if fp is not None:
            try:
                _mod = imp.load_module('_cairo_access', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cairo_access = swig_import_helper()
    del swig_import_helper
else:
    import _cairo_access
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_doubleArray(*args):
  return _cairo_access.new_doubleArray(*args)
new_doubleArray = _cairo_access.new_doubleArray

def delete_doubleArray(*args):
  return _cairo_access.delete_doubleArray(*args)
delete_doubleArray = _cairo_access.delete_doubleArray

def doubleArray_getitem(*args):
  return _cairo_access.doubleArray_getitem(*args)
doubleArray_getitem = _cairo_access.doubleArray_getitem

def doubleArray_setitem(*args):
  return _cairo_access.doubleArray_setitem(*args)
doubleArray_setitem = _cairo_access.doubleArray_setitem
CAIRO_FORMAT_ARGB32 = _cairo_access.CAIRO_FORMAT_ARGB32
CAIRO_FORMAT_RGB24 = _cairo_access.CAIRO_FORMAT_RGB24
CAIRO_FORMAT_A8 = _cairo_access.CAIRO_FORMAT_A8
CAIRO_FORMAT_A1 = _cairo_access.CAIRO_FORMAT_A1
CAIRO_ANTIALIAS_DEFAULT = _cairo_access.CAIRO_ANTIALIAS_DEFAULT
CAIRO_ANTIALIAS_NONE = _cairo_access.CAIRO_ANTIALIAS_NONE
CAIRO_ANTIALIAS_GRAY = _cairo_access.CAIRO_ANTIALIAS_GRAY
CAIRO_ANTIALIAS_SUBPIXEL = _cairo_access.CAIRO_ANTIALIAS_SUBPIXEL
CAIRO_FONT_SLANT_NORMAL = _cairo_access.CAIRO_FONT_SLANT_NORMAL
CAIRO_FONT_SLANT_ITALIC = _cairo_access.CAIRO_FONT_SLANT_ITALIC
CAIRO_FONT_SLANT_OBLIQUE = _cairo_access.CAIRO_FONT_SLANT_OBLIQUE
CAIRO_FONT_WEIGHT_NORMAL = _cairo_access.CAIRO_FONT_WEIGHT_NORMAL
CAIRO_FONT_WEIGHT_BOLD = _cairo_access.CAIRO_FONT_WEIGHT_BOLD
class cairo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cairo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cairo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cairo_access.new_cairo(*args)
        try: self.this.append(this)
        except: self.this = this
    def rectangle(self, *args): return _cairo_access.cairo_rectangle(self, *args)
    def ellipse(self, *args): return _cairo_access.cairo_ellipse(self, *args)
    def write_to_png(self, *args): return _cairo_access.cairo_write_to_png(self, *args)
    def set_source_rgb(self, *args): return _cairo_access.cairo_set_source_rgb(self, *args)
    def stroke(self): return _cairo_access.cairo_stroke(self)
    def fill(self): return _cairo_access.cairo_fill(self)
    def save(self): return _cairo_access.cairo_save(self)
    def restore(self): return _cairo_access.cairo_restore(self)
    def scale(self, *args): return _cairo_access.cairo_scale(self, *args)
    def translate(self, *args): return _cairo_access.cairo_translate(self, *args)
    def arc(self, *args): return _cairo_access.cairo_arc(self, *args)
    def rotate(self, *args): return _cairo_access.cairo_rotate(self, *args)
    def fill_preserve(self): return _cairo_access.cairo_fill_preserve(self)
    def show_text(self, *args): return _cairo_access.cairo_show_text(self, *args)
    def set_font_size(self, *args): return _cairo_access.cairo_set_font_size(self, *args)
    def text_extents(self, *args): return _cairo_access.cairo_text_extents(self, *args)
    def select_font_face(self, *args): return _cairo_access.cairo_select_font_face(self, *args)
    def line_to(self, *args): return _cairo_access.cairo_line_to(self, *args)
    def set_line_width(self, *args): return _cairo_access.cairo_set_line_width(self, *args)
    def set_dash(self, *args): return _cairo_access.cairo_set_dash(self, *args)
    def move_to(self, *args): return _cairo_access.cairo_move_to(self, *args)
    def curve_to(self, *args): return _cairo_access.cairo_curve_to(self, *args)
    def new_path(self): return _cairo_access.cairo_new_path(self)
    def close_path(self): return _cairo_access.cairo_close_path(self)
    def set_antialias(self, *args): return _cairo_access.cairo_set_antialias(self, *args)
    __swig_destroy__ = _cairo_access.delete_cairo
    __del__ = lambda self : None;
cairo_swigregister = _cairo_access.cairo_swigregister
cairo_swigregister(cairo)

# This file is compatible with both classic and new-style classes.


