import re
import os
import string
import sys
from string import Template;
import shutil
import datetime

from src.shorte_defines import *
from template import *



class template_vera_t(template_t):

    def __init__(self, engine, indexer):
        
        template_t.__init__(self, engine, indexer)

        self.m_contents = ""
        self.m_engine = engine
        self.m_indexer = indexer
        self.m_theme = ""
        self.m_template_dir = shorte_get_startup_path() + "/templates/text/"
        self.m_inline = False

    def get_header(self):

        return '''//+----------------------------------------------------------------------------
//|
//| FILENAME: main.vr
//|
//| PROJECT: Blah Blah
//|
//| FILE DESCRIPTION:
//|    This file contains the implementation of the register utility
//|    that forms part of the Xframe Toolbox.
//|
//+----------------------------------------------------------------------------
//|
//| Copyright 2010 by Exar. All text contained within remains property
//| of Exar corporation and may not be modified, distributed, or
//| reproduced without the express written permission of Exar.
//|
//+----------------------------------------------------------------------------

class s2io_data_c {

    string m_name;

    task new(string name)
    {
        this.m_name = name;
    }
}



'''

    

    def format_struct(self, tag):
        
        struct = tag["contents"]

        return struct["record"].to_vera()

   
    def append(self, tag):
        
        name = tag["name"]

        if(name == "struct"):
            self.m_contents += self.format_struct(tag)


    def get_contents(self):
        
        return self.m_contents
        

    def _load_template(self):
        
        handle = open(shorte_get_startup_path() + "/templates/vera/%s.vr" % self.m_engine.get_theme(), "r")
        contents = handle.read()
        handle.close()

        return contents
    def format_page(self, name):

        template = string.Template(self._load_template())

        vars = {}
        vars["filename"] = name
        vars["project"] = "Your project here"
        vars["description"] = "Automatically generated by shorte"
        vars["code" ] = self.get_contents()
        self.m_contents = ''

        return template.substitute(vars)

    
    def generate(self, theme, version, package):

        self.m_package = package
        self.m_inline = True
        
        page_names = {}
        
        # Format the output pages
        pages = self.m_engine.m_parser.get_pages()
        self.m_contents = ""

        for page in pages:

            tags = page["tags"]
            source_file = page["source_file"]

            # Strip off the extension
            output_file = re.sub(".tpl", "", source_file)
            output_file = os.path.basename(output_file)

            base = output_file

            # Now see if the page name already exists and modify
            # it as necessary
            cnt = 1
            while(page_names.has_key(base)):
                base = "%s_%d" % (output_file,cnt)
                cnt += 1

            page_names[base] = base
            output_file = base + ".vr"

            path = self.m_engine.get_output_dir() + "/" + output_file

            for tag in tags:

                self.append(tag)

            output = open(path, "w")
            output.write(self.format_page(output_file))
            output.close

